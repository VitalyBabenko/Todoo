{"ast":null,"code":"var _jsxFileName = \"/Users/Vitaliy/Desktop/web/react/todoo/src/Components/Tasks/Tasks.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext } from 'react';\nimport { TodoContext } from '../context';\nimport './Tasks.scss';\nimport Button from '../../UI/Button/Button';\nimport Task from '../Task/Task';\nimport { TaskServiсe, ListServiсe } from '../../API/Serviсe';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Tasks() {\n  _s();\n\n  const {\n    lists,\n    setLists,\n    chosenList,\n    currentPage\n  } = useContext(TodoContext);\n  const [newTask, setNewTask] = useState({\n    value: '',\n    listId: +currentPage\n  });\n\n  const addTask = async newTask => {\n    if (newTask.value) {\n      await TaskServiсe.postTask(newTask);\n      const updatedList = await ListServiсe.getLists();\n      setLists(updatedList);\n    }\n\n    console.log(newTask);\n    setNewTask({\n      value: '',\n      listId: null\n    });\n  };\n\n  const deleteTask = deletedTask => {\n    // tasks = tasks.filter(task => task.id !== deletedTask.id)\n    TaskServiсe.deleteTask(deletedTask);\n  };\n\n  const categoryTitle = () => {\n    return +currentPage ? chosenList.title : 'All';\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tasks\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"tasks__title\",\n      children: categoryTitle()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      value: newTask.value,\n      onChange: e => setNewTask({\n        value: e.target.value,\n        listId: +currentPage\n      }),\n      className: \"tasks__input input\",\n      type: \"text\",\n      placeholder: `Create task on '${categoryTitle()}' category`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => addTask(newTask),\n      title: 'Create new task',\n      className: 'new-task-btn'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n      className: \"tasks__line\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 10\n    }, this), currentPage ? lists.forEach(list => list.task).tasks.map(task => /*#__PURE__*/_jsxDEV(Task, {\n      task: task,\n      deleteTask: () => deleteTask(task)\n    }, task.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 16\n    }, this)) : lists[currentPage - 1].tasks.map(task => /*#__PURE__*/_jsxDEV(Task, {\n      task: task,\n      deleteTask: () => deleteTask(task)\n    }, task.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 16\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Tasks, \"LXsyUzeRuxba75O43qIlwtfKu9s=\");\n\n_c = Tasks;\nexport default Tasks;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tasks\");","map":{"version":3,"names":["React","useState","useContext","TodoContext","Button","Task","TaskServiсe","ListServiсe","Tasks","lists","setLists","chosenList","currentPage","newTask","setNewTask","value","listId","addTask","postTask","updatedList","getLists","console","log","deleteTask","deletedTask","categoryTitle","title","e","target","forEach","list","task","tasks","map","id"],"sources":["/Users/Vitaliy/Desktop/web/react/todoo/src/Components/Tasks/Tasks.jsx"],"sourcesContent":["import React, { useState, useContext } from 'react'\nimport { TodoContext } from '../context'\nimport './Tasks.scss'\nimport Button from '../../UI/Button/Button'\nimport Task from '../Task/Task'\nimport { TaskServiсe, ListServiсe } from '../../API/Serviсe'\n\n\n\nfunction Tasks() {\n   const { lists, setLists, chosenList, currentPage } = useContext(TodoContext)\n   const [newTask, setNewTask] = useState({ value: '', listId: +currentPage })\n\n   const addTask = async (newTask) => {\n      if (newTask.value) {\n         await TaskServiсe.postTask(newTask)\n         const updatedList = await ListServiсe.getLists()\n         setLists(updatedList)\n      }\n      console.log(newTask)\n      setNewTask({ value: '', listId: null })\n   }\n\n\n   const deleteTask = (deletedTask) => {\n      // tasks = tasks.filter(task => task.id !== deletedTask.id)\n      TaskServiсe.deleteTask(deletedTask)\n   }\n\n   const categoryTitle = () => {\n      return +currentPage ? chosenList.title : 'All'\n   }\n\n   return (\n      <div className='tasks' >\n         <h1 className='tasks__title' >\n            {categoryTitle()}\n         </h1>\n\n         <input\n            value={newTask.value}\n            onChange={e => setNewTask({ value: e.target.value, listId: +currentPage })}\n            className='tasks__input input'\n            type=\"text\"\n            placeholder={`Create task on '${categoryTitle()}' category`} />\n         <Button\n            onClick={() => addTask(newTask)}\n            title={'Create new task'}\n            className={'new-task-btn'}\n         />\n         <hr className='tasks__line' />\n\n         {currentPage ?\n            lists.forEach(list => list.task).tasks.map(task =>\n               <Task\n                  key={task.id}\n                  task={task}\n                  deleteTask={() => deleteTask(task)}\n               />)\n            :\n\n            lists[currentPage - 1].tasks.map(task =>\n               <Task\n                  key={task.id}\n                  task={task}\n                  deleteTask={() => deleteTask(task)}\n               />)}\n      </div>\n   )\n}\n\nexport default Tasks"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,OAA5C;AACA,SAASC,WAAT,QAA4B,YAA5B;AACA,OAAO,cAAP;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,mBAAzC;;;AAIA,SAASC,KAAT,GAAiB;EAAA;;EACd,MAAM;IAAEC,KAAF;IAASC,QAAT;IAAmBC,UAAnB;IAA+BC;EAA/B,IAA+CV,UAAU,CAACC,WAAD,CAA/D;EACA,MAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC;IAAEc,KAAK,EAAE,EAAT;IAAaC,MAAM,EAAE,CAACJ;EAAtB,CAAD,CAAtC;;EAEA,MAAMK,OAAO,GAAG,MAAOJ,OAAP,IAAmB;IAChC,IAAIA,OAAO,CAACE,KAAZ,EAAmB;MAChB,MAAMT,WAAW,CAACY,QAAZ,CAAqBL,OAArB,CAAN;MACA,MAAMM,WAAW,GAAG,MAAMZ,WAAW,CAACa,QAAZ,EAA1B;MACAV,QAAQ,CAACS,WAAD,CAAR;IACF;;IACDE,OAAO,CAACC,GAAR,CAAYT,OAAZ;IACAC,UAAU,CAAC;MAAEC,KAAK,EAAE,EAAT;MAAaC,MAAM,EAAE;IAArB,CAAD,CAAV;EACF,CARD;;EAWA,MAAMO,UAAU,GAAIC,WAAD,IAAiB;IACjC;IACAlB,WAAW,CAACiB,UAAZ,CAAuBC,WAAvB;EACF,CAHD;;EAKA,MAAMC,aAAa,GAAG,MAAM;IACzB,OAAO,CAACb,WAAD,GAAeD,UAAU,CAACe,KAA1B,GAAkC,KAAzC;EACF,CAFD;;EAIA,oBACG;IAAK,SAAS,EAAC,OAAf;IAAA,wBACG;MAAI,SAAS,EAAC,cAAd;MAAA,UACID,aAAa;IADjB;MAAA;MAAA;MAAA;IAAA,QADH,eAKG;MACG,KAAK,EAAEZ,OAAO,CAACE,KADlB;MAEG,QAAQ,EAAEY,CAAC,IAAIb,UAAU,CAAC;QAAEC,KAAK,EAAEY,CAAC,CAACC,MAAF,CAASb,KAAlB;QAAyBC,MAAM,EAAE,CAACJ;MAAlC,CAAD,CAF5B;MAGG,SAAS,EAAC,oBAHb;MAIG,IAAI,EAAC,MAJR;MAKG,WAAW,EAAG,mBAAkBa,aAAa,EAAG;IALnD;MAAA;MAAA;MAAA;IAAA,QALH,eAWG,QAAC,MAAD;MACG,OAAO,EAAE,MAAMR,OAAO,CAACJ,OAAD,CADzB;MAEG,KAAK,EAAE,iBAFV;MAGG,SAAS,EAAE;IAHd;MAAA;MAAA;MAAA;IAAA,QAXH,eAgBG;MAAI,SAAS,EAAC;IAAd;MAAA;MAAA;MAAA;IAAA,QAhBH,EAkBID,WAAW,GACTH,KAAK,CAACoB,OAAN,CAAcC,IAAI,IAAIA,IAAI,CAACC,IAA3B,EAAiCC,KAAjC,CAAuCC,GAAvC,CAA2CF,IAAI,iBAC5C,QAAC,IAAD;MAEG,IAAI,EAAEA,IAFT;MAGG,UAAU,EAAE,MAAMR,UAAU,CAACQ,IAAD;IAH/B,GACQA,IAAI,CAACG,EADb;MAAA;MAAA;MAAA;IAAA,QADH,CADS,GASTzB,KAAK,CAACG,WAAW,GAAG,CAAf,CAAL,CAAuBoB,KAAvB,CAA6BC,GAA7B,CAAiCF,IAAI,iBAClC,QAAC,IAAD;MAEG,IAAI,EAAEA,IAFT;MAGG,UAAU,EAAE,MAAMR,UAAU,CAACQ,IAAD;IAH/B,GACQA,IAAI,CAACG,EADb;MAAA;MAAA;MAAA;IAAA,QADH,CA3BN;EAAA;IAAA;IAAA;IAAA;EAAA,QADH;AAoCF;;GA5DQ1B,K;;KAAAA,K;AA8DT,eAAeA,KAAf"},"metadata":{},"sourceType":"module"}