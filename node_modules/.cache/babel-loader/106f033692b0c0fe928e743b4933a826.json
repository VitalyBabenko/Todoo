{"ast":null,"code":"var _jsxFileName = \"/Users/Vitaliy/Desktop/web/react/todoo/src/Components/Tasks/Tasks.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './Tasks.scss';\nimport Button from '../../UI/Button/Button';\nimport Task from '../Task/Task'; // import PostService from '../../API/PostServise'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Tasks(_ref) {\n  _s();\n\n  let {\n    lists,\n    setLists,\n    chosenList\n  } = _ref;\n  const [newTask, setNewTask] = useState({\n    value: '',\n    listId: chosenList.id\n  });\n\n  const addTask = newTask => {\n    if (newTask.value) {\n      const newList = lists.map(item => {\n        if (+item.id === +newTask.listId) {\n          item.tasks = [...item.tasks, newTask];\n        }\n\n        return item;\n      });\n      setLists(newList);\n    }\n\n    PostService.postTask(newTask);\n    setNewTask({\n      value: '',\n      listId: null\n    });\n  };\n\n  const categoryTitle = () => {\n    if (chosenList.id) {\n      return chosenList.title;\n    } else {\n      return 'All';\n    }\n  };\n\n  const renderTasks = () => {\n    if (chosenList) {\n      return chosenList.tasks.map(task => /*#__PURE__*/_jsxDEV(Task, {\n        task: task,\n        chosenList: chosenList\n      }, task.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this));\n    } else {\n      return lists.map(list => list.tasks.map(task => /*#__PURE__*/_jsxDEV(Task, {\n        task: task,\n        chosenList: chosenList,\n        lists: lists\n      }, task.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }, this)));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tasks\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"tasks__title\",\n      children: categoryTitle()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      value: newTask.value,\n      onChange: e => setNewTask({\n        value: e.target.value,\n        id: Date.now(),\n        listId: chosenList.id\n      }),\n      className: \"tasks__input input\",\n      type: \"text\",\n      placeholder: `Create task on '${categoryTitle()}' category`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => addTask(newTask),\n      title: 'Create new task',\n      className: 'new-task-btn'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n      className: \"tasks__line\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 10\n    }, this), renderTasks()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Tasks, \"R3puXRuAkuQHQRRC21zFgO4p2j0=\");\n\n_c = Tasks;\nexport default Tasks;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tasks\");","map":{"version":3,"names":["React","useState","Button","Task","Tasks","lists","setLists","chosenList","newTask","setNewTask","value","listId","id","addTask","newList","map","item","tasks","PostService","postTask","categoryTitle","title","renderTasks","task","list","e","target","Date","now"],"sources":["/Users/Vitaliy/Desktop/web/react/todoo/src/Components/Tasks/Tasks.jsx"],"sourcesContent":["import React, { useState } from 'react'\nimport './Tasks.scss'\nimport Button from '../../UI/Button/Button'\nimport Task from '../Task/Task'\n// import PostService from '../../API/PostServise'\n\n\n\nfunction Tasks({ lists, setLists, chosenList }) {\n   const [newTask, setNewTask] = useState({ value: '', listId: chosenList.id, })\n\n   const addTask = (newTask) => {\n      if (newTask.value) {\n         const newList = lists.map(item => {\n            if (+item.id === +newTask.listId) {\n               item.tasks = [...item.tasks, newTask]\n            }\n            return item\n         })\n         setLists(newList)\n      }\n\n\n\n\n\n\n\n\n      PostService.postTask(newTask)\n      setNewTask({ value: '', listId: null })\n   }\n\n   const categoryTitle = () => {\n      if (chosenList.id) {\n         return chosenList.title\n      } else {\n         return 'All'\n      }\n   }\n\n\n\n   const renderTasks = () => {\n      if (chosenList) {\n         return chosenList.tasks.map(task =>\n            <Task\n               key={task.id}\n               task={task}\n               chosenList={chosenList}\n            />)\n      } else {\n         return lists.map(list => list.tasks.map(task =>\n            < Task\n               key={task.id}\n               task={task}\n               chosenList={chosenList}\n               lists={lists}\n            />))\n      }\n   }\n\n   return (\n      <div className='tasks' >\n         <h1 className='tasks__title' >\n            {categoryTitle()}\n         </h1>\n\n         <input\n            value={newTask.value}\n            onChange={e => setNewTask({ value: e.target.value, id: Date.now(), listId: chosenList.id })}\n            className='tasks__input input'\n            type=\"text\"\n            placeholder={`Create task on '${categoryTitle()}' category`} />\n         <Button\n            onClick={() => addTask(newTask)}\n            title={'Create new task'}\n            className={'new-task-btn'}\n         />\n         <hr className='tasks__line' />\n\n         {renderTasks()}\n      </div>\n   )\n}\n\nexport default Tasks"],"mappings":"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"},"metadata":{},"sourceType":"module"}